[config]
# prevent workspace auto run on each crate
default_to_workspace = false

# global env
[env]
HOST = "0.0.0.0"
PORT = 18080
GLOBAL = "rust api"
APP_NAME = "rust api"
DATABASE_USERNAME = "app"
DATABASE_PASSWORD = "passwd"
DATABASE_NAME = "app"
DATABASE_PORT_OUTER = 5432
DATABASE_PORT_INNER = 5432
REDIS_PORT_OUTER = 6379
REDIS_PORT_INNER = 6379
AUTH_TOKEN_TTL = 86400

# env for docker compose network
[tasks.set-env-docker.env]
DATABASE_HOST = "postgres"
DATABASE_PORT = "${DATABASE_PORT_INNER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}"
REDIS_HOST = "redis"
REDIS_PORT = "${REDIS_PORT_INNER}"
JAEGER_HOST = "jaeger"
JAEGER_PORT = 6831

# env for outer docker compose network
[tasks.set-env-local.env]
LOCAL = "local environment"
DATABASE_HOST = "localhost"
DATABASE_PORT = "${DATABASE_PORT_OUTER}"
DATABASE_URL = "postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}"
REDIS_HOST = "localhost"
REDIS_PORT = "${REDIS_PORT_OUTER}"
JAEGER_HOST = "localhost"
JAEGER_PORT = 6831

# build command
[tasks.before-build]
run_task = [
  { name = [
    "compose-up-db",
    # "migrate",
    "compose-up-redis",
    "compose-up-jaeger",
  ] },
]

[tasks.compose-build-app]
extend = "set-env-local"
command = "docker"
args = [
  "compose", "build", "app",
  "--build-arg", "BUILDKIT_INLINE_CACHE=1", "${@}"
]

[tasks.run]
extend = "set-env-local"
# use precon not dep, to avoid reset env by env set of other containers
# NOTE: if u want use set-local-env in before-build, apply 'extend' in before-build
precondition = ["before-build"]
command = "cargo"
args = ["run", "${@}"]

[tasks.run-in-docker]
extend = "set-env-docker"
dependencies = [
  "before-build",
  "compose-build-app",
  # "initial-setup",
]
command = "docker"
args = ["compose", "up", "-d", "app"]

[tasks.logs]
extend = "set-env-docker"
dependencies = ["before-build"]
command = "docker"
args = ["compose", "logs", "${@}"]

[tasks.build]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["build", "${@}"]
# In release, run cargo make build --release

[tasks.check]
extend = "set-env-local"
dependencies = ["before-build"]
command = "cargo"
args = ["check"]

# development support
[tasks.watch]
extend = "set-env-local"
dependencies = ["before-build"]
run_task = [ {name = ["fmt", "clippy", "test"] } ]
watch = true

[tasks.fmt]
extend = "set-env-local"
command = "cargo"
args = ["fmt", "--all", "${@}"]

[tasks.create-hash]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! bcrypt = "0.15.1"
//! ```
fn main() {
  let password = &std::env::args().collect::<Vec<String>>()[1];
  let hashed = bcrypt::hash(password, bcrypt::DEFAULT_COST).unwrap();
  println!("{}", hashed);
}
'''

[tasks.clippy]
extend = "set-env-local"
command = "cargo"
args = ["clippy", "--all", "--all-targets", "${@}"]

[tasks.test]
extend = "set-env-local"
install_crate = { crate_name = "cargo-nextest", binary = "cargo", test_arg = [
  "nextest", "--help",
] }
command = "cargo"
args = [
  "nextest", "run", "--workspace",
  "--status-level", "all", "--test-threads=1", "--no-tests=pass",
]

# set up for clippy to check sqlx in ci
[tasks.before-build-ci]
run_task = [
    { name = [
        "compose-up-db",
        "migrate",
        "compose-up-redis",
    ] },
]

[tasks.clippy-ci]
extend = "set-env-local"
dependencies = ["before-build-ci"]
command = "cargo"
args = ["clippy", "--", "--no-deps", "-Dwarnings"]

[tasks.test-ci]
dependencies = ["before-build-ci"]
run_task = "test"

# migration
[tasks.migrate]
extend = "set-env-local"
install_crate = { crate_name = "diesel_cli", binary = "diesel", test_arg = "--help", version = "0.7.3" }
script = '''
#!/bin/bash
until diesel migration run
    sleep 1
done
'''

[tasks.gen-migrate]
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
command = "sqlx"
args = ["migrate", "add", "-r", "start", "--source", "adapter/migrations"]

[tasks.sqlx]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
command = "sqlx"
args = ["${@}", "--source", "adapter/migrations"]

[tasks.sqlx-prepare]
extend = "set-env-local"
install_crate = { crate_name = "sqlx-cli", binary = "sqlx", test_arg = "--help", version = "0.7.3" }
command = "cargo"
args = ["sqlx", "prepare"]

[tasks.psql]
extend = "set-env-local"
command = "docker"
args = [
  "run", "-it", "--rm",
  "--network", "host",
  "-v", "${PWD}:/work",
  "postgres:15", "psql", "${DATABASE_URL}", "${@}"
]

[tasks.initial-setup]
extend = "set-env-local"
command = "docker"
args = [
  "run", "-it", "--rm",
  "--network", "host",
  "-v", "${PWD}:/work",
  "postgres:15", "psql", "${DATABASE_URL}",
  "-f", "/work/data/initial_setup.sql"
]

### Docker compose

[tasks.compose]
extend = "set-env-docker"
command = "docker"
args = ["compose", "${@}"]

[tasks.compose-up-app]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "app"]

[tasks.compose-up-db]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "postgres"]

[tasks.compose-up-redis]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "redis"]

[tasks.compose-up-jaeger]
extend = "set-env-docker"
command = "docker"
args = ["compose", "up", "-d", "jaeger"]

[tasks.compose-down]
extend = "set-env-docker"
command = "docker"
args = ["compose", "down"]

[tasks.compose-remove]
extend = "set-env-docker"
command = "docker"
args = ["compose", "down", "-v"]

# for Github Actions ECR build
[tasks.ecr-build]
extend = "set-env-local"
command = "docker"
args = [
  "build", "-t", "backend:latest",
  "--build-arg", "BUILDKIT_INLINE_CACHE=1",
  "-f", "./docker/ecr/Dockerfile",
  "."
]

# create .env for diesel CLI
[tasks.create-env-diesel]
script = '''
#!/bin/bash
# DATABASE_URLの行を除外して一時ファイルに保存
if [ -f .env ]; then
    grep -v "^DATABASE_URL=" .env > .env.tmp
else
    touch .env.tmp
fi
# 新しいDATABASE_URLを追加
echo "DATABASE_URL=postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@localhost:${DATABASE_PORT_OUTER}/${DATABASE_NAME}" >> .env.tmp
# 一時ファイルを元のファイルに移動
mv .env.tmp .env
'''